#version 430 core

layout (quads, equal_spacing, cw) in;

in vec2 tcTexCoord[];
in vec3 tcNormal[];
in vec3 tcPosition[];

out vec2 TexCoord;
out vec3 Normal;
out vec3 FragPos;
out vec4 FragPosLightSpace;

uniform mat4 model;
uniform mat4 pv;
uniform mat4 lightVPMatrix;

uniform sampler2D HeightMap;

void main(void)
{
	TexCoord = mix(
		mix(tcTexCoord[0], tcTexCoord[3], gl_TessCoord.x), 
		mix(tcTexCoord[1], tcTexCoord[2], gl_TessCoord.x), 
		gl_TessCoord.y);	


	float y = texture(HeightMap, TexCoord).r * 10;

	FragPos = vec3(model * vec4(mix(
		mix(tcPosition[0], tcPosition[3], gl_TessCoord.x), 
		mix(tcPosition[1], tcPosition[2], gl_TessCoord.x), 
		gl_TessCoord.y),1 ));

	FragPos.y = y;

	FragPosLightSpace = lightVPMatrix * vec4(FragPos, 1.0f);

	vec2 texelSize = 1.0 / textureSize(HeightMap, 0);

    float Yleft = texture(HeightMap, TexCoord + vec2(-1, 0) * texelSize).r; 
    float Yright = texture(HeightMap, TexCoord + vec2(1, 0) * texelSize).r; 
    float Yup = texture(HeightMap, TexCoord + vec2(0, -1) * texelSize).r; 
    float Ydown = texture(HeightMap, TexCoord + vec2(0, 1) * texelSize).r; 
    float Yupleft = texture(HeightMap, TexCoord + vec2(-1, -1) * texelSize).r; 
    float Ydownright = texture(HeightMap, TexCoord + vec2(1, 1) * texelSize).r; 

    Normal = normalize(vec3(
        (2 * (Yleft - Yright) + Yupleft - Ydownright - Yup + Ydown) / texelSize.x, 
        2,
        -(2 * (Ydown - Yup) - Yupleft - Ydownright + Yup + Yleft) / texelSize.y));

    gl_Position = pv * vec4(FragPos, 1.0);

	
}