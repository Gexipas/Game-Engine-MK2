#version 450 core

in vec2 TexCoord;
in vec3 Normal;
in vec3 FragPos;
in vec4 FragPosLightSpace;

out vec4 fragColor;

// texture
uniform sampler2D Texture;
uniform sampler2D ShadowMap;

// lighting
uniform vec3 cameraPos; 
uniform vec3 lightPos; 


uniform float ambientStr = 0.15f;
uniform vec3  ambientColor = vec3(1.0f, 1.0f, 1.0f);
uniform vec3  lightColor = vec3(1.0f, 1.0f, 1.0f);
uniform float lightSpecStr = 0.2f;
uniform float shininess = 4.0f;
uniform int   rimExponent = 4;
uniform vec3  rimColor = vec3(1.0f, 0.0f, 0.0f);

// shadow calculation
float ShadowCalculation(vec4 fragPosLightSpace)
{
	// To get NDC [-1, 1] from screenspace
	vec3 ndcSpace = fragPosLightSpace.xyz/fragPosLightSpace.w;
	
	// Convert to TexCoordSpace [0,1]
	vec3 texCoordSpace =  0.5f * ndcSpace + 0.5f;
	
	float currentDepth = texCoordSpace.z;
	
	float closestDepth = texture(ShadowMap, texCoordSpace.xy).r;
	
	float shadow = closestDepth > currentDepth ? 0.0 : 1.0;
	
	return shadow;
}


void main(void)
{   
	// Ambient
	vec3 ambient = ambientStr * ambientColor;

	// Light Direction
	vec3 norm = normalize(Normal);
	vec3 lightDir = normalize(FragPos - lightPos);

	// Diffuse Colouring
	float diffuseStr = max(dot(norm,-lightDir), 0.0f);
	vec3 diffuse = diffuseStr * lightColor;

	// Specular Highlight
	vec3 negViewDir = normalize(cameraPos - FragPos);

	//vec3 reflectDir = reflect(lightDir, norm);
	//float spec = pow(max(dot(negViewDir, reflectDir), 0.0f), shininess);

	// rim lighting
	float rimFactor = 1.0 - dot(norm, negViewDir);
	rimFactor = smoothstep(0.0, 1.0, rimFactor);
	rimFactor = pow(rimFactor, rimExponent);
	vec3 rim = rimFactor * rimColor * lightColor;

	// reflect
	vec3 viewDir = normalize(FragPos - cameraPos);
	vec3 reflectDir = reflect(viewDir, norm);

	vec3 halfwayVec = normalize(-lightDir + negViewDir);
	float spec = pow(max(dot(norm, halfwayVec),0.0f),shininess);
	vec3 specular = lightSpecStr * spec * lightColor;

	float shadow = ShadowCalculation(FragPosLightSpace);
	
	vec3 totalColor= ambient + ((shadow) * (diffuse + specular+ rim));
	
	fragColor= vec4(totalColor, 1.0f) * texture(Texture, TexCoord);
}